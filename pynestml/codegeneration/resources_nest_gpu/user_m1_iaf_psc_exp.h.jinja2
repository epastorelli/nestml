{#-
NeuronHeader.jinja2

This file is part of NEST.

Copyright (C) 2004 The NEST Initiative

NEST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

NEST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NEST.  If not, see <http://www.gnu.org/licenses/>.
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif -%}
/**
 *  {{neuronName}}.h
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Generated from NESTML at time: {{now}}
**/
#ifndef {{neuronName.upper()}}
#define {{neuronName.upper()}}

#include <iostream>
#include <string>
#include "cuda_error.h"
#include "node_group.h"
#include "base_neuron.h"
#include "neuron_models.h"

namespace {{neuronName}}_ns
{
        enum ScalVarIndexes
        {
{%-     for variable_name in scalar_variables %}
      {{variable_name}},
{%-     endfor %}
        N_SCAL_VAR
        }

        enum ScalParamIndexes
        {
{%-     for variable_name in scalar_params %}
      {{variable_name}},
{%-     endfor %}
	N_SCAL_PARAM
        }

	const std::string {{neuronName}}_scal_var_name[N_SCAL_VAR] = {
{%-     for variable_name in scal_var_name %}
      {{variable_name}},
{%-     endfor %}
        }

	const std::string {{neuronName}}_scal_param_name[N_SCAL_PARAM] = {
{%-     for variable_name in scal_var_name %}
      {{variable_name}},
{%-     endfor %}
        }

}
 
class {{neuronName}} : public BaseNeuron
{
 public:
  ~{{neuronName}}();
  
  int Init(int i_node_0, int n_neuron, int n_port, int i_group,
	   unsigned long long *seed);

  int Calibrate(double, float time_resolution);
		
  int Update(long long it, double t1);

  int Free();

};


#endif
